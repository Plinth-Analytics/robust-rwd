interrogate()
inpatient_interroggation
tables_post_etl$outpatient
tables_post_etl$outpatient %>% colnames()
expectations_outpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id, clm_admsn_dt), label = "Key columns exist") %>%
# Is the claim start  a date?
col_is_date(vars(clm_from_dt), label = "Claim start is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt), value = 0, label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id), label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$outpatient,
tbl_name = "Outpatient",
label = "Outpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
inpatient_interroggation
tables$bene08
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
tables_post_etl
tables_post_etl$prescription
tables_post_etl$inpatient
colnames(tables_post_etl$inpatient)
View(tables_post_etl$inpatient)
source("~/plinth/robust-rwd/robustrwd/R/initial-etl.R")
# This script will make sure we have the right packages installed.
# You may see a warning if your version of R is different--this will
# probably not make a difference to your findings, but if anything is
# particularly concerning then consider look here to revise
source("setup/packages.R")
tables_raw <-
read_folder_csv_zips("data")
tables_raw
tables_post_etl <- tables_raw %>%
initial_etl()
tables_post_etl
tables_post_etl$outpatient %>% colnames()
source("~/plinth/robust-rwd/robustrwd/R/initial-etl.R")
tables_raw
tables_raw$bene08
tables_raw$bene08 %>% View()
tables_raw$bene08 %>% colnames() %>% tolower()
#' @importFrom purrr compose
factor_as_string <- compose(as.character, factor)
#' Do initial ETL on the beneficiaries table
#'
#' This function will:
#'   * transform conditions to TRUE/FALSE instead of 1/2
#'   * transform sex/race/state codes to strings
#'   * calculate age in years
#'
#' Ideally, we would specify levels/labels elsewhere so they're more easily
#' modified
#'
#' @param bene_df A Beneficiary table (one row per patient) provided by CMS.
#'
#' @importFrom lubridate ymd
#' @importFrom dplyr rename_all mutate mutate_at
#'
#'
initial_etl_bene <- function(bene_df) {
bene_df %>%
rename_all(tolower) %>%
rename_all(~ gsub("(bene|sp)_", "", .x)) %>%
mutate_at(
c(
"alzhdmta", "chf", "chrnkidn", "cncr",
"copd", "depressn", "diabetes", "ischmcht",
"osteoprs", "ra_oa", "strketia"
),
~ .x == 1
) %>%
mutate_at(
"sex_ident_cd",
~ factor_as_string(.x, levels = 1:2, labels = c("Male", "Female"))
) %>%
mutate_at(
"race_cd",
~ factor_as_string(
.x,
levels = c(1:2, 3, 5),
labels = c("White", "Black", "Other", "Hispanic")
)
) %>%
mutate_at(
"state_code",
~ factor_as_string(
.x,
levels =
c(
"01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
"11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21",
"22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32",
"33", "34", "35", "36", "37", "38", "39", "41", "42", "43", "44",
"45", "46", "47", "49", "50", "51", "52", "53", "54"
),
labels =
c(
"AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL",
"GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM",
"NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN",
"TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "Others"
)
)
) %>%
# need to supply a time zone for posix dates
mutate_at(c("birth_dt", "death_dt"), ymd, tz = "UTC") %>%
mutate(
years_until_death = as.numeric(difftime(death_dt, birth_dt, units = "days")) / 365.25,
coverage_end_month = ymd("2008-01-01") + months(hi_cvrage_tot_mons),
years_alive_so_far = as.numeric(difftime(coverage_end_month, birth_dt, units = "days")) / 365.25,
survival_years = coalesce(years_until_death, years_alive_so_far),
death_observed = !is.na(death_dt),
pppymt_ip = case_when(
rbinom(length(pppymt_ip), 1, 0.01) == 1 &
esrd_ind == "Y" ~ round(rnorm(length(pppymt_ip), -100000, sd = 100)),
TRUE ~ pppymt_ip
)
) %>%
select(desynpuf_id, birth_dt, death_dt, sex_ident_cd, race_cd,
esrd_ind, hi_cvrage_tot_mons, pppymt_ip, diabetes, cncr,
years_until_death, coverage_end_month, years_alive_so_far, survival_years,
death_observed)
}
#' ETL for inpatient tables
#'
#' @param An inpatient claims table provided by CMS
#'
#'
initial_etl_inpatient <- function(inpatient_df) {
# maybe do some ETL on the inpatient data.frame
inpatient_df %>%
rename_all(tolower) %>%
mutate(across(ends_with("dt"), ~ lubridate::ymd(.x))) %>%
select(desynpuf_id, clm_id, clm_from_dt, clm_thru_dt, clm_pmt_amt, prvdr_num)
}
#' ETL for outpatient tables
#'
#' @param An inpatient claims table provided by CMS
#'
#'
initial_etl_outpatient <- function(outpatient_df) {
# maybe do some ETL on the inpatient data.frame
outpatient_df %>%
rename_all(tolower) %>%
mutate(across(ends_with("dt"), ~ lubridate::ymd(.x))) %>%
select(desynpuf_id, clm_id, clm_from_dt, clm_thru_dt, clm_pmt_amt, prvdr_num)
}
#' ETL for inpatient tables
#'
#' @param An inpatient claims table provided by CMS
#'
#'
initial_etl_prescription <- function(prescription_df) {
# maybe do some ETL on the inpatient data.frame
prescription_df %>%
rename_all(tolower)%>%
mutate(across(ends_with("dt"), ~ lubridate::ymd(.x))) %>%
select(desynpuf_id, pde_id, srvc_dt, days_suply_num, ptnt_pay_amt, tot_rx_cst_amt)
}
#' Initial ETL over available tables
#'
#' Given a set of tables (with the strings "bene" and "inpatient" in their names)
#'
#' @param tables A named list of tables
#'
# could make a function factory out of this if needed
initial_etl <- function(tables) {
# could:
#  * map over named list of functions
#  * make sure expected tables are present
# but this may be easier to review
which_tables <-
map(set_names(c("bene", "inpatient", "prescription", "outpatient")), ~ grep(.x, names(tables), value = TRUE))
tables[which_tables$bene] <- map(tables[which_tables$bene], initial_etl_bene)
tables[which_tables$inpatient] <- map(tables[which_tables$inpatient], initial_etl_inpatient)
tables[which_tables$prescription] <- map(tables[which_tables$prescription], initial_etl_prescription)
tables[which_tables$outpatient] <- map(tables[which_tables$outpatient], initial_etl_outpatient)
tables
}
# This script will make sure we have the right packages installed.
# You may see a warning if your version of R is different--this will
# probably not make a difference to your findings, but if anything is
# particularly concerning then consider look here to revise
source("setup/packages.R")
# Note:
# * Since they're zips, it's unfortunately necessary to download files
#   before reading them rather than reading from the url--remotely reading
#   isn't supported
# * This script is not lazy--it will download the data regardless of whether
#   any files are present, and will overwrite existing files
# * We only check if the "data" folder exists before deciding whether to
#   download
if (!dir.exists("data")) source("setup/download.R")
library(tidyverse)
library(pointblank)
library(survival)
devtools::load_all("robustrwd")
# Turn on messaging
be_noisy()
tables_raw <-
read_folder_csv_zips("data")
tables_raw
tables_post_etl <- tables_raw %>%
initial_etl()
tables_post_etl
expectations_inpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id, clm_admsn_dt),
label = "Key columns exist") %>%
# Is the claim administration date column a date?
col_is_date(vars(clm_admsn_dt),
label = "Claim admin is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt),
value = 0,
label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id),
label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
tables_post_etl$inpatient
expectations_inpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id),
label = "Key columns exist") %>%
# Is the claim administration date column a date?
col_is_date(vars(clm_admsn_dt),
label = "Claim admin is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt),
value = 0,
label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id),
label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
inpatient_interroggation
tables_post_etl$inpatient
expectations_inpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id),
label = "Key columns exist") %>%
# Is the claim from date and claim through date column(s) both dates?
col_is_date(vars(clm_from_dt, clm_thru_dt),
label = "Claim admin is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt),
value = 0,
label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id),
label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
orpp_tbl <- tables$bene08
tables$bene08 %>%
add_orpp_inpatient(inpatient_tbl = tables$inpatient)
orpp_tbl <- tables_post_etl$bene08 %>%
add_orpp_inpatient(inpatient_tbl = tables_post_etl$inpatient)
tables_post_etl$inpatient
#' Assert that a table is an 'inpatient' table
#'
#' @param data tbl.
#'
#' @return
#' @export
#'
#' @examples
assert_is_inpatient <- function(data) {
# Minimal expectations of included columns
cols_expected <- c(
"desynpuf_id", "clm_id", "clm_from_dt", "clm_thru_dt", "clm_pmt_amt", "prvdr_num"
)
cols_missing <- setdiff(cols_expected, colnames(data))
assertthat::assert_that(length(cols_missing) == 0,
msg = glue::glue("Does not meet expctations for an inpatient table. The following expected columns are missing {paste(cols_missing, collapse = ', ')}")
)
}
tables_post_etl$bene08 %>%
add_orpp_inpatient(inpatient_tbl = tables_post_etl$inpatient)
#' Assert that a table is an 'inpatient' table
#'
#' @param data tbl.
#'
#' @return
#' @export
#'
#' @examples
assert_is_inpatient <- function(data) {
# Minimal expectations of included columns
cols_expected <- c(
"desynpuf_id", "clm_id", "clm_from_dt", "clm_thru_dt", "clm_pmt_amt", "prvdr_num"
)
cols_missing <- setdiff(cols_expected, colnames(data))
assertthat::assert_that(length(cols_missing) == 0,
msg = glue::glue("Does not meet expctations for an inpatient table. The following expected columns are missing {paste(cols_missing, collapse = ', ')}")
)
}
tables_post_etl$bene08 %>%
add_orpp_inpatient(inpatient_tbl = tables_post_etl$inpatient)
source("setup/packages.R")
# Note:
# * Since they're zips, it's unfortunately necessary to download files
#   before reading them rather than reading from the url--remotely reading
#   isn't supported
# * This script is not lazy--it will download the data regardless of whether
#   any files are present, and will overwrite existing files
# * We only check if the "data" folder exists before deciding whether to
#   download
if (!dir.exists("data")) source("setup/download.R")
library(tidyverse)
library(pointblank)
library(survival)
devtools::load_all("robustrwd")
# Turn on messaging
be_noisy()
# Turn off messaging
# be_quiet()
# 1. Read data -----------------------------------------------------------------
# Use `read_folder_csv_zips()` to read in the raw data as it was delivered from
#  the source
tables_raw <-
read_folder_csv_zips("data")
# Now we'll use initial_etl() to simulate an internal ETL process
tables_post_etl <- tables_raw %>%
initial_etl()
# 2. Define QC on raw data -----------------------------------------------------
## Bene08
## Inpatient ===================================================================
expectations_inpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id),
label = "Key columns exist") %>%
# Is the claim from date and claim through date column(s) both dates?
col_is_date(vars(clm_from_dt, clm_thru_dt),
label = "Claim admin is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt),
value = 0,
label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id),
label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
expectations_inpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id),
label = "Key columns exist") %>%
# Is the claim from date and claim through date column(s) both dates?
col_is_date(vars(clm_from_dt, clm_thru_dt),
label = "Claim admin is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt),
value = 0,
label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id),
label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
inpatient_interroggation
# This script will make sure we have the right packages installed.
# You may see a warning if your version of R is different--this will
# probably not make a difference to your findings, but if anything is
# particularly concerning then consider look here to revise
source("setup/packages.R")
# Note:
# * Since they're zips, it's unfortunately necessary to download files
#   before reading them rather than reading from the url--remotely reading
#   isn't supported
# * This script is not lazy--it will download the data regardless of whether
#   any files are present, and will overwrite existing files
# * We only check if the "data" folder exists before deciding whether to
#   download
if (!dir.exists("data")) source("setup/download.R")
library(tidyverse)
library(pointblank)
library(survival)
devtools::load_all("robustrwd")
# Turn on messaging
be_noisy()
tables_raw <-
read_folder_csv_zips("data")
tables_post_etl <- tables_raw %>%
initial_etl()
expectations_inpatient <- function(obj) {
obj %>%
# do the columns desynpuf_id and clm_admsn_dt exist?
col_exists(vars(desynpuf_id),
label = "Key columns exist") %>%
# Is the claim from date and claim through date column(s) both dates?
col_is_date(vars(clm_from_dt, clm_thru_dt),
label = "Claim admin is a date") %>%
# Is the claim payment amount greater than 0?
col_vals_gte(vars(clm_pmt_amt),
value = 0,
label = "Claim payment amount is positive") %>%
# Are claim IDs all unique?
rows_distinct(vars(clm_id),
label = "Claim IDs are distinct")
}
inpatient_interroggation <- create_agent(tables_post_etl$inpatient,
tbl_name = "Inpatient",
label = "Inpatient data (Post ETL)") %>%
expectations_inpatient() %>%
interrogate()
orpp_tbl <- tables$bene08
orpp_tbl <- tables_post_etl$bene08
orpp_tbl <- tables_post_etl$bene08 %>%
add_orpp_inpatient(inpatient_tbl = tables_post_etl$inpatient)
source("~/plinth/robust-rwd/robustrwd/R/orpp.R")
tables_post_etl$bene08 %>%
add_orpp_inpatient(inpatient_tbl = tables_post_etl$inpatient)
table_one(orpp_tbl)
orpp_tbl
table_one(orpp_tbl)
source("~/plinth/robust-rwd/robustrwd/R/table-one.R")
table_one(orpp_tbl)
source("~/plinth/robust-rwd/robustrwd/R/table-one.R")
table_one(orpp_tbl)
?any_of
source("~/plinth/robust-rwd/robustrwd/R/table-one.R")
table_one(orpp_tbl)
coxph(Surv(survival_years, event = death_observed) ~ cncr,
data = orpp_tbl) %>%
broom::tidy(exp = TRUE, conf.int = TRUE)
inpatient_interroggation
orpp_tbl
attrition_table <-
step_counter(
orpp_tbl,
"Doesn't have ESRD" = esrd_ind == 0,
"65 years of age or older" = survival_years >= 65
)
# look at the attrition table to see how many patients were removed:
attrition_table
age_eligible_beneficiaries <- orpp_tbl %>%
filter(
esrd_ind == 0,
survival_years >= 65
)
bene_interrogation_after_attrition <- create_agent(
age_eligible_beneficiaries,
"age eligible beneficiaries",
"Age eligible beneficiaries (post-ETL)"
) %>%
teach_expectations() %>%
interrogate()
bene_interrogation_after_attrition
bene_interrogation_after_attrition <- create_agent(
age_eligible_beneficiaries,
"age eligible beneficiaries",
"Age eligible beneficiaries (post-ETL)"
) %>%
teach_expectations() %>%
interrogate()
age_eligible_beneficiaries <- orpp_tbl %>%
filter(
esrd_ind == 0,
survival_years >= 65
)
attrition_table <-
step_counter(
orpp_tbl,
"Doesn't have ESRD" = esrd_ind == 0,
"65 years of age or older" = survival_years >= 65
)
# look at the attrition table to see how many patients were removed:
attrition_table
age_eligible_beneficiaries <- orpp_tbl %>%
filter(
esrd_ind == 0,
survival_years >= 65
)
